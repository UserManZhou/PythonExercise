# print("My first Python Code!")

'''
py 算术运算符
'''
'''
print(3 + 4)
print(3 - 4)
print(3 * 4)
print(3 // 4)
print(3 % 2)
print(3 ** 4)  # 3 to the fourth power
print(3 // 4)  # floor division
'''
'''
看，它们非常标准。我包括了如何做指数，因为它有点时髦，但除此之外，
它们相当正常并且按预期工作。不要忘记，您可以使用 + 号连接字符串。
加法、减法、乘法和除法的工作方式与预期一样。
您以前可能没有见过模运算符 （%）。模算子所做的只是将左边除以右边并得到余数。
因此，余数是返回的内容，而不是正确数字进入左侧数字的次数 double * 只是向 Python 提供指数的一种简单方法。
最后，楼层除法运算符 （//） 只是将数字除以并向下舍入。
'''
########################################################################
'''
赋值运算符
'''
'''
a = 0
a += 2
print(a)
'''
'''
当然，您可以使用前面的任何算术运算符作为赋值运算符，
后跟 = 我们刚刚告诉 Python 将 2 添加到 a 的值上，
而不必说 a = a + 2 之类的话。
我们是程序员，我们很自豪被称为懒惰！
'''
########################################################################
'''
For循环
是时候让 Python 成为一个很棒的部分了。与其他一些语言相比，Python 的 for 循环非常惊人，因为它们的通用性和简单性。
for 循环的想法相当简单，您只需循环一些代码一定次数即可。在我们进入列表之前，我不会有机会向您展示 for 循环的灵活性，但可以肯定的是，它的时间会到来。举个例子：
'''
'''
for a in range(1, 3):
    print(a)
'''
########################################################################
'''
Python创建类
好吧，我不会骗你。如果您从未有过面向对象编程 （OOP） 的经验，那么接下来的几个教程将相当复杂。由于几个原因，课程很棒。
首先，它们可以帮助您重用代码，而不是在程序的其他地方复制代码。当您意识到要更改功能时，类将挽救您的生命。
您只会在一个位置更改它，而不是在代码略有不同的 10 个不同位置更改它。
类的另一个重要部分是它们允许您创建更灵活的函数。首先，我们需要亲自动手，开始弄清楚如何上课。
'''


# ClassOne.py
class Calculator(object):
    class_variable = "This is a class variable"

    def __init__(self, class_variable):
        self.current = 0
        self.class_variable = class_variable

    def add(self, amount):
        self.current += amount

    def getCurrent(self):
        return str(self.current) + "\n" + self.class_variable


'''
现在，我不会像其他人一样，开始对你轰炸术语。坦率地说，面向对象编程对于初学者来说是相当困难的，
把这些抽象的概念扔给你只会让你学得更慢，讨厌OOP。所以，类有点像一个函数。
我们只是使用 class 关键字建立它，然后用我们想要命名的类来跟进它。在我们的例子中，
我们正在制作一个计算器，这就是我所说的。多么原始！接下来，我们加入 object 的参数。
这只是这个类之上的一个类。不要太担心。它涉及一些严肃的术语来解释。所以，只需输入它，我们稍后会讨论它。

接下来，我们进入这个小家伙def __init__（self）：。抽象概念时间！对象由类组成。
所以，如果我们有一个名为 cake 的类。我们可以制作蛋糕对象。然而，每当你做一个蛋糕时，
它和你之前做的蛋糕是不一样的。当然，它可能看起来像它，尝起来也像它，但它不是一模一样的蛋糕。
所以，在我们的课堂上，我们有实例，这样我们就知道它们是两个不同的蛋糕。你问我们为什么需要这个？
好吧，让我们从同一个班级做两个蛋糕。现在，我咬了一大口蛋糕。现在，你肯定想知道哪个蛋糕是对的？
这就是为什么实例如此重要的原因！所以，def __init__ （self）：只是说让我们创建这个类的一个实例。
但是，你可能会问，为什么我们要传入自我的参数。嗯，这与我们刚才讨论的内容非常相关。类生成对象，
类中的函数成为对象的方法。但是，我们确实需要知道哪个类函数属于该类的哪个实例，
因此我们只是隐式地传入 self 的 objects 属性（在后面的示例中进一步讨论）。
最后，我们深入到初始化函数的核心。我们使用 self.current 创建一个等于零的实例变量。
追求！我们已经完成了最艰难的部分。

下一站是添加功能。我们只需传入 self 和另一个称为 amount 的参数。同样，自我是，
所以我们知道是哪个实例。希望该金额是传入的某个数字。利用我们之前的知识，
我们明白我们只是将任何金额添加到当前变量中。

最后，但并非最不重要的一点是，我们继续讨论从类中“获取”变量的想法。
为了获得 self.current 变量的值，我们应该使用最佳实践，将其放入函数中，
然后调用该函数来获取值，这样我们就不会混淆我们的实例。我们设置函数并传入实例，然后告诉 Python 返回值。
'''
'''
使用Calculator类
'''
myCalculator = Calculator("Instance Variable 1")
myCalculator.add(2)
print(myCalculator.getCurrent())
